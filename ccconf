#!/usr/bin/env perl

our $CTAGS = 'ctags';
our $CDEPS = 'c++ -MM';

use strict;
use List::Util qw/max/;
use Cwd;
use File::Basename;

$0 = basename $0;

my @sources = <*.cc *.cpp>;
my @cfiles = <*.c>;
if (!scalar @sources and !scalar @cfiles) {
	die "$0: error: No C/C++ source file found\n";
}

my @objects = ();
for (@sources, @cfiles) {
	/(.+)(?:\.cc|\.cpp|\.c)$/;
	push @objects, $1 . '.o';
}

my $program = basename getcwd;
my %options = ();
my $linker = scalar @sources ? 'CXX' : 'CC';

if (not open MAKEFILE, '>', 'Makefile') {
	die "$0: error: Failed to write to Makefile: $!\n";
}

select MAKEFILE;

print "# $0 @ARGV\n";
print "\n" if scalar %options;

my $all_libs = `/sbin/ldconfig -p 2>/dev/null`;
$all_libs = `/sbin/ldconfig -r 2>/dev/null` if $?;
die "$0: error: ldconfig not found\n" if $?;

my $pgm_def = 0;

print STDERR "==>  Configuring for $program\n";
while ($_ = shift) {
	if (/(.+?)\+=(.*)/) {
		$options{$1} .= ' ' . $2;
	} elsif (/(.+?)=(.*)/) {
		$options{$1} = $2;
	} elsif (/^\+(.*)/) {
		print STDERR "==>   $program depends on package: $1 - ";
		$options{CFLAGS} .= `pkg-config --cflags $1 2>/dev/null`;
		die "not found\n" if $?;
		print STDERR "found\n";
		chomp $options{CFLAGS};
		$options{LDFLAGS} .= `pkg-config --libs $1`;
		chomp $options{LDFLAGS};
	} elsif (/^\-(.*)/) {
		print STDERR "==>   $program depends on library: lib$1.so - ";
		$options{LDFLAGS} .= "-l$1";
		die "not found\n" unless $all_libs =~ /\/lib$1\.so\./;
		print STDERR "found\n";
	} else {
		if (not $pgm_def) {
			print STDERR "==>  Renaming $program to $_\n"
				if $program ne $_;
			$program = $_;
			$pgm_def = 1;
		} else {
			warn "$0: warning: unused argument -- $_\n";
		}
	}
}

# Generates the Makefile


print STDERR "==>  Writing Makefile ..";

my $lkey = max map { length $_ } keys %options;
while (my ($key, $value) = each %options) {
	printf "%-${lkey}s = %s\n", $key, $value;
}

print qq{
.PHONY : all clean
all : $program
clean :
	rm -f $program @objects tags

tags : *.h @sources @cfiles
	$CTAGS *.h @sources @cfiles

$program : @objects
	\$($linker) \$(LDFLAGS) -o $program @objects
};

for (@sources, @cfiles) {
	print `$CDEPS $_`;
}

print STDERR ". done\n";
